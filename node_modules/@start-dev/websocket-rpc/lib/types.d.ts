export declare type MessageID = number & {
    __brand: MessageID;
};
export declare enum RequestKind {
    Authenticate = 0,
    Subscribe = 1,
    MethodCall = 2
}
export interface BaseRequest {
    id: MessageID;
}
export interface AuthenticateRequest extends BaseRequest {
    kind: RequestKind.Authenticate;
    token: string;
}
export interface SubscribeRequest extends BaseRequest {
    kind: RequestKind.Subscribe;
    moduleID: string;
    exportName: string;
    etag: string;
}
export interface MethodCallRequest extends BaseRequest {
    kind: RequestKind.MethodCall;
    moduleID: string;
    exportName: string;
    args: any[];
}
export declare type RpcRequest = AuthenticateRequest | SubscribeRequest | MethodCallRequest;
export declare enum ResponseKind {
    Authenticated = 0,
    AuthenticationRequired = 1,
    SubscriptionUpdate = 2,
    SubscriptionError = 3,
    MethodCallResult = 4,
    MethodCallError = 5
}
export interface BaseResponse {
    id: MessageID;
}
export interface AuthenticatedResponse extends BaseResponse {
    kind: ResponseKind.Authenticated;
}
export interface SubscriptionUpdateResponse extends BaseResponse {
    kind: ResponseKind.SubscriptionUpdate;
    etag: string;
    value: any;
}
export interface SubscriptionErrorResponse extends BaseResponse {
    kind: ResponseKind.SubscriptionError;
    message: string;
}
export interface MethodCallResultResponse extends BaseResponse {
    kind: ResponseKind.MethodCallResult;
    value: any;
}
export interface MethodCallErrorResponse extends BaseResponse {
    kind: ResponseKind.MethodCallError;
    code: string | null;
    message: string;
}
export interface AuthenticationRequiredResponse extends BaseResponse {
    kind: ResponseKind.AuthenticationRequired;
}
export declare type RpcResponse = AuthenticatedResponse | AuthenticationRequiredResponse | SubscriptionUpdateResponse | SubscriptionErrorResponse | MethodCallResultResponse | MethodCallErrorResponse;
