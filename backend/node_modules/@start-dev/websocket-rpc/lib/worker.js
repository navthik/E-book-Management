import { fork } from 'child_process';
const workerPath = require.resolve('./worker-process.cjs');
export default function createWorker(options) {
    var _a, _b, _c;
    const worker = fork(workerPath, (_a = options.args) !== null && _a !== void 0 ? _a : process.argv.slice(2), {
        cwd: (_b = options.cwd) !== null && _b !== void 0 ? _b : process.cwd(),
        stdio: 'inherit',
        env: {
            ...((_c = options.env) !== null && _c !== void 0 ? _c : process.env),
            WEBSOCKET_RPC_TOKEN: options.token,
        },
    });
    // TODO: handle error and exit events
    return {
        send: (message) => {
            worker.send(message);
        },
        onResponse: (fn) => {
            worker.on('message', (m) => fn(m));
        },
    };
}
//# sourceMappingURL=worker.js.map