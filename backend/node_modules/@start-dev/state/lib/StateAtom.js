export default function createStateAtom(initialValue) {
    const subscribers = new Set();
    let updating = false;
    let dirty = false;
    let value = initialValue;
    return [
        {
            getValue() {
                return value;
            },
            subscribe(fn) {
                if (subscribers.has(fn)) {
                    throw new Error('You cannot subscribe to the same atom multiple times.');
                }
                subscribers.add(fn);
                return () => {
                    subscribers.delete(fn);
                };
            },
        },
        function setValue(updatedValue) {
            const updatedValueRaw = typeof updatedValue === 'function'
                ? updatedValue(value)
                : updatedValue;
            if (value === updatedValueRaw)
                return;
            value = updatedValueRaw;
            dirty = true;
            while (dirty && !updating) {
                updating = true;
                dirty = false;
                try {
                    for (const subscriber of subscribers) {
                        subscriber(value);
                    }
                }
                finally {
                    updating = false;
                }
            }
        },
    ];
}
//# sourceMappingURL=StateAtom.js.map