'use strict';

Object.defineProperty(exports, '__esModule', {value: true});

var React = require('react');
var beamwind = require('beamwind');
var state = require('@start-dev/state');

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {default: e};
}

var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);

function useObservableState(observable) {
  const [state, setState] = React.useState(observable.getValue());
  React.useEffect(() => {
    return observable.subscribe(setState);
  }, []);
  return state;
}

function getWindowColorScheme() {
  return window.matchMedia
    ? window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light'
    : null;
}
const [colorScheme, setColorScheme] = state.createStateAtom(
  getWindowColorScheme(),
);
const [colorSchemeOverride, setColorSchemeOverride] = state.createStateAtom(
  null,
);
colorSchemeOverride.subscribe((value) => {
  if (value === null) {
    setColorScheme(getWindowColorScheme());
  } else {
    setColorScheme(value);
  }
});
if (window.matchMedia) {
  const media = window.matchMedia('(prefers-color-scheme: dark)');
  media.addEventListener('change', (event) => {
    if (colorSchemeOverride.getValue() === null) {
      setColorScheme(event.matches ? 'dark' : 'light');
    }
  });
}
function useColorScheme(defaultMode) {
  var _a;
  return (_a = useObservableState(colorScheme)) !== null && _a !== void 0
    ? _a
    : defaultMode;
}
const DarkModeSelector = React__default['default'].memo(
  function DarkModeSelector({defaultMode}) {
    const currentColorScheme = useColorScheme(defaultMode);
    return React__default['default'].createElement(
      'button',
      {
        type: 'button',
        className: beamwind.bw`fixed flex items-stretch top-0 right-0 z-10 m-4 border-2 border-gray-600 dark:border-gray-200 rounded-full h-6 w-10 box-content focus:outline-none`,
        onClick: () => {
          var _a;
          const current =
            (_a = colorScheme.getValue()) !== null && _a !== void 0
              ? _a
              : defaultMode;
          setColorSchemeOverride(current === 'light' ? 'dark' : 'light');
        },
      },
      React__default['default'].createElement('div', {
        className: beamwind.bw`${
          currentColorScheme === 'dark' ? `opacity-100` : `opacity-0`
        } transition-opacity duration-200 bg-gray-800 absolute top-0 bottom-0 right-0 left-0 rounded-full`,
      }),
      React__default['default'].createElement('div', {
        className: beamwind.bw`${
          currentColorScheme === 'light' ? `opacity-100` : `opacity-0`
        } transition-opacity duration-200 bg-blue-300 absolute top-0 bottom-0 right-0 left-0 rounded-full`,
      }),
      React__default['default'].createElement(
        'div',
        {
          className: beamwind.bw`flex flex-grow items-center justify-center relative`,
        },
        React__default['default'].createElement('div', {
          className: beamwind.bw`${
            currentColorScheme === 'light' ? `opacity-100` : `opacity-0`
          } transition-opacity duration-200 m-1 rounded-full h-3 w-3 bg-yellow-300`,
        }),
      ),
      React__default['default'].createElement(
        'div',
        {
          className: beamwind.bw`flex flex-grow items-center justify-center relative`,
        },
        React__default['default'].createElement('div', {
          className: beamwind.bw`${
            currentColorScheme === 'dark' ? `opacity-100` : `opacity-0`
          } transition-opacity duration-200 m-1 rounded-full h-3 w-3 bg-gray-200`,
        }),
        React__default['default'].createElement('div', {
          className: beamwind.bw`${
            currentColorScheme === 'dark' ? `opacity-100` : `opacity-0`
          } transition-opacity duration-200 absolute top-0 right-0 m-1 rounded-full h-2 w-2 bg-gray-800`,
          style: {
            height: '0.7rem',
            width: '0.7rem',
            marginTop: '0.3rem',
            marginRight: '0.1rem',
          },
        }),
      ),
      React__default['default'].createElement('div', {
        className: beamwind.bw`absolute left-0 top-0 w-4 h-4 m-1 rounded-full ${
          currentColorScheme === 'dark' ? 'bg-gray-600' : 'bg-gray-700'
        } transform transition-transform duration-200 ${
          currentColorScheme === 'dark' ? `translate-x-0` : `translate-x-4`
        }`,
      }),
    );
  },
);

exports.colorScheme = colorScheme;
exports.colorSchemeOverride = colorSchemeOverride;
exports.default = DarkModeSelector;
exports.setColorSchemeOverride = setColorSchemeOverride;
exports.useColorScheme = useColorScheme;
